/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.littlepancake.glpk.jni;

public class GLPK implements GlpkConstants {
  public static SWIGTYPE_p_double new_double_array(int nelements) {
    long cPtr = glpkJNI.new_double_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_double_array(SWIGTYPE_p_double ary) {
    glpkJNI.delete_double_array(SWIGTYPE_p_double.getCPtr(ary));
  }

  public static double double_array_getitem(SWIGTYPE_p_double ary, int index) {
    return glpkJNI.double_array_getitem(SWIGTYPE_p_double.getCPtr(ary), index);
  }

  public static void double_array_setitem(SWIGTYPE_p_double ary, int index, double value) {
    glpkJNI.double_array_setitem(SWIGTYPE_p_double.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_int new_int_array(int nelements) {
    long cPtr = glpkJNI.new_int_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_int_array(SWIGTYPE_p_int ary) {
    glpkJNI.delete_int_array(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int int_array_getitem(SWIGTYPE_p_int ary, int index) {
    return glpkJNI.int_array_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
  }

  public static void int_array_setitem(SWIGTYPE_p_int ary, int index, int value) {
    glpkJNI.int_array_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_glp_prob glp_create_prob() {
    long cPtr = glpkJNI.glp_create_prob();
    return (cPtr == 0) ? null : new SWIGTYPE_p_glp_prob(cPtr, false);
  }

  public static void glp_set_prob_name(SWIGTYPE_p_glp_prob P, String name) {
    glpkJNI.glp_set_prob_name(SWIGTYPE_p_glp_prob.getCPtr(P), name);
  }

  public static void glp_set_obj_name(SWIGTYPE_p_glp_prob P, String name) {
    glpkJNI.glp_set_obj_name(SWIGTYPE_p_glp_prob.getCPtr(P), name);
  }

  public static void glp_set_obj_dir(SWIGTYPE_p_glp_prob P, int dir) {
    glpkJNI.glp_set_obj_dir(SWIGTYPE_p_glp_prob.getCPtr(P), dir);
  }

  public static int glp_add_rows(SWIGTYPE_p_glp_prob P, int nrs) {
    return glpkJNI.glp_add_rows(SWIGTYPE_p_glp_prob.getCPtr(P), nrs);
  }

  public static int glp_add_cols(SWIGTYPE_p_glp_prob P, int ncs) {
    return glpkJNI.glp_add_cols(SWIGTYPE_p_glp_prob.getCPtr(P), ncs);
  }

  public static void glp_set_row_name(SWIGTYPE_p_glp_prob P, int i, String name) {
    glpkJNI.glp_set_row_name(SWIGTYPE_p_glp_prob.getCPtr(P), i, name);
  }

  public static void glp_set_col_name(SWIGTYPE_p_glp_prob P, int j, String name) {
    glpkJNI.glp_set_col_name(SWIGTYPE_p_glp_prob.getCPtr(P), j, name);
  }

  public static void glp_set_row_bnds(SWIGTYPE_p_glp_prob P, int i, int type, double lb, double ub) {
    glpkJNI.glp_set_row_bnds(SWIGTYPE_p_glp_prob.getCPtr(P), i, type, lb, ub);
  }

  public static void glp_set_col_bnds(SWIGTYPE_p_glp_prob P, int j, int type, double lb, double ub) {
    glpkJNI.glp_set_col_bnds(SWIGTYPE_p_glp_prob.getCPtr(P), j, type, lb, ub);
  }

  public static void glp_set_obj_coef(SWIGTYPE_p_glp_prob P, int j, double coef) {
    glpkJNI.glp_set_obj_coef(SWIGTYPE_p_glp_prob.getCPtr(P), j, coef);
  }

  public static void glp_set_mat_row(SWIGTYPE_p_glp_prob P, int i, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    glpkJNI.glp_set_mat_row(SWIGTYPE_p_glp_prob.getCPtr(P), i, len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static void glp_set_mat_col(SWIGTYPE_p_glp_prob P, int j, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    glpkJNI.glp_set_mat_col(SWIGTYPE_p_glp_prob.getCPtr(P), j, len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static void glp_load_matrix(SWIGTYPE_p_glp_prob P, int ne, SWIGTYPE_p_int ia, SWIGTYPE_p_int ja, SWIGTYPE_p_double ar) {
    glpkJNI.glp_load_matrix(SWIGTYPE_p_glp_prob.getCPtr(P), ne, SWIGTYPE_p_int.getCPtr(ia), SWIGTYPE_p_int.getCPtr(ja), SWIGTYPE_p_double.getCPtr(ar));
  }

  public static int glp_check_dup(int m, int n, int ne, SWIGTYPE_p_int ia, SWIGTYPE_p_int ja) {
    return glpkJNI.glp_check_dup(m, n, ne, SWIGTYPE_p_int.getCPtr(ia), SWIGTYPE_p_int.getCPtr(ja));
  }

  public static void glp_sort_matrix(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_sort_matrix(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_del_rows(SWIGTYPE_p_glp_prob P, int nrs, SWIGTYPE_p_int num) {
    glpkJNI.glp_del_rows(SWIGTYPE_p_glp_prob.getCPtr(P), nrs, SWIGTYPE_p_int.getCPtr(num));
  }

  public static void glp_del_cols(SWIGTYPE_p_glp_prob P, int ncs, SWIGTYPE_p_int num) {
    glpkJNI.glp_del_cols(SWIGTYPE_p_glp_prob.getCPtr(P), ncs, SWIGTYPE_p_int.getCPtr(num));
  }

  public static void glp_copy_prob(SWIGTYPE_p_glp_prob dest, SWIGTYPE_p_glp_prob prob, int names) {
    glpkJNI.glp_copy_prob(SWIGTYPE_p_glp_prob.getCPtr(dest), SWIGTYPE_p_glp_prob.getCPtr(prob), names);
  }

  public static void glp_erase_prob(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_erase_prob(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_delete_prob(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_delete_prob(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static String glp_get_prob_name(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_prob_name(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static String glp_get_obj_name(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_obj_name(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_obj_dir(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_obj_dir(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_num_rows(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_num_rows(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_num_cols(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_num_cols(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static String glp_get_row_name(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_name(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static String glp_get_col_name(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_name(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static int glp_get_row_type(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_type(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_get_row_lb(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_lb(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_get_row_ub(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_ub(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static int glp_get_col_type(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_type(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_get_col_lb(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_lb(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_get_col_ub(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_ub(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_get_obj_coef(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_obj_coef(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static int glp_get_num_nz(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_num_nz(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_mat_row(SWIGTYPE_p_glp_prob P, int i, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_get_mat_row(SWIGTYPE_p_glp_prob.getCPtr(P), i, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static int glp_get_mat_col(SWIGTYPE_p_glp_prob P, int j, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_get_mat_col(SWIGTYPE_p_glp_prob.getCPtr(P), j, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static void glp_create_index(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_create_index(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_find_row(SWIGTYPE_p_glp_prob P, String name) {
    return glpkJNI.glp_find_row(SWIGTYPE_p_glp_prob.getCPtr(P), name);
  }

  public static int glp_find_col(SWIGTYPE_p_glp_prob P, String name) {
    return glpkJNI.glp_find_col(SWIGTYPE_p_glp_prob.getCPtr(P), name);
  }

  public static void glp_delete_index(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_delete_index(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_set_rii(SWIGTYPE_p_glp_prob P, int i, double rii) {
    glpkJNI.glp_set_rii(SWIGTYPE_p_glp_prob.getCPtr(P), i, rii);
  }

  public static void glp_set_sjj(SWIGTYPE_p_glp_prob P, int j, double sjj) {
    glpkJNI.glp_set_sjj(SWIGTYPE_p_glp_prob.getCPtr(P), j, sjj);
  }

  public static double glp_get_rii(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_rii(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_get_sjj(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_sjj(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static void glp_scale_prob(SWIGTYPE_p_glp_prob P, int flags) {
    glpkJNI.glp_scale_prob(SWIGTYPE_p_glp_prob.getCPtr(P), flags);
  }

  public static void glp_unscale_prob(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_unscale_prob(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_set_row_stat(SWIGTYPE_p_glp_prob P, int i, int stat) {
    glpkJNI.glp_set_row_stat(SWIGTYPE_p_glp_prob.getCPtr(P), i, stat);
  }

  public static void glp_set_col_stat(SWIGTYPE_p_glp_prob P, int j, int stat) {
    glpkJNI.glp_set_col_stat(SWIGTYPE_p_glp_prob.getCPtr(P), j, stat);
  }

  public static void glp_std_basis(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_std_basis(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_adv_basis(SWIGTYPE_p_glp_prob P, int flags) {
    glpkJNI.glp_adv_basis(SWIGTYPE_p_glp_prob.getCPtr(P), flags);
  }

  public static void glp_cpx_basis(SWIGTYPE_p_glp_prob P) {
    glpkJNI.glp_cpx_basis(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_simplex(SWIGTYPE_p_glp_prob P, glp_smcp parm) {
    return glpkJNI.glp_simplex(SWIGTYPE_p_glp_prob.getCPtr(P), glp_smcp.getCPtr(parm), parm);
  }

  public static int glp_exact(SWIGTYPE_p_glp_prob P, glp_smcp parm) {
    return glpkJNI.glp_exact(SWIGTYPE_p_glp_prob.getCPtr(P), glp_smcp.getCPtr(parm), parm);
  }

  public static void glp_init_smcp(glp_smcp parm) {
    glpkJNI.glp_init_smcp(glp_smcp.getCPtr(parm), parm);
  }

  public static int glp_get_status(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_status(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_prim_stat(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_prim_stat(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_dual_stat(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_dual_stat(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static double glp_get_obj_val(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_obj_val(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_row_stat(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_stat(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_get_row_prim(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_prim(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_get_row_dual(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_dual(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static int glp_get_col_stat(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_stat(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_get_col_prim(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_prim(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_get_col_dual(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_dual(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static int glp_get_unbnd_ray(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_unbnd_ray(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_it_cnt(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_it_cnt(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_set_it_cnt(SWIGTYPE_p_glp_prob P, int it_cnt) {
    glpkJNI.glp_set_it_cnt(SWIGTYPE_p_glp_prob.getCPtr(P), it_cnt);
  }

  public static int glp_interior(SWIGTYPE_p_glp_prob P, glp_iptcp parm) {
    return glpkJNI.glp_interior(SWIGTYPE_p_glp_prob.getCPtr(P), glp_iptcp.getCPtr(parm), parm);
  }

  public static void glp_init_iptcp(glp_iptcp parm) {
    glpkJNI.glp_init_iptcp(glp_iptcp.getCPtr(parm), parm);
  }

  public static int glp_ipt_status(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_ipt_status(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static double glp_ipt_obj_val(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_ipt_obj_val(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static double glp_ipt_row_prim(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_ipt_row_prim(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_ipt_row_dual(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_ipt_row_dual(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_ipt_col_prim(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_ipt_col_prim(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static double glp_ipt_col_dual(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_ipt_col_dual(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static void glp_set_col_kind(SWIGTYPE_p_glp_prob P, int j, int kind) {
    glpkJNI.glp_set_col_kind(SWIGTYPE_p_glp_prob.getCPtr(P), j, kind);
  }

  public static int glp_get_col_kind(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_kind(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static int glp_get_num_int(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_num_int(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_get_num_bin(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_get_num_bin(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_intopt(SWIGTYPE_p_glp_prob P, glp_iocp parm) {
    return glpkJNI.glp_intopt(SWIGTYPE_p_glp_prob.getCPtr(P), glp_iocp.getCPtr(parm), parm);
  }

  public static void glp_init_iocp(glp_iocp parm) {
    glpkJNI.glp_init_iocp(glp_iocp.getCPtr(parm), parm);
  }

  public static int glp_mip_status(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_mip_status(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static double glp_mip_obj_val(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_mip_obj_val(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static double glp_mip_row_val(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_mip_row_val(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static double glp_mip_col_val(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_mip_col_val(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static void glp_check_kkt(SWIGTYPE_p_glp_prob P, int sol, int cond, SWIGTYPE_p_double ae_max, SWIGTYPE_p_int ae_ind, SWIGTYPE_p_double re_max, SWIGTYPE_p_int re_ind) {
    glpkJNI.glp_check_kkt(SWIGTYPE_p_glp_prob.getCPtr(P), sol, cond, SWIGTYPE_p_double.getCPtr(ae_max), SWIGTYPE_p_int.getCPtr(ae_ind), SWIGTYPE_p_double.getCPtr(re_max), SWIGTYPE_p_int.getCPtr(re_ind));
  }

  public static int glp_print_sol(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_print_sol(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_read_sol(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_read_sol(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_write_sol(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_write_sol(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_print_ranges(SWIGTYPE_p_glp_prob P, int len, SWIGTYPE_p_int list, int flags, String fname) {
    return glpkJNI.glp_print_ranges(SWIGTYPE_p_glp_prob.getCPtr(P), len, SWIGTYPE_p_int.getCPtr(list), flags, fname);
  }

  public static int glp_print_ipt(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_print_ipt(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_read_ipt(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_read_ipt(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_write_ipt(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_write_ipt(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_print_mip(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_print_mip(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_read_mip(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_read_mip(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_write_mip(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_write_mip(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_bf_exists(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_bf_exists(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_factorize(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_factorize(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_bf_updated(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_bf_updated(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static void glp_get_bfcp(SWIGTYPE_p_glp_prob P, glp_bfcp parm) {
    glpkJNI.glp_get_bfcp(SWIGTYPE_p_glp_prob.getCPtr(P), glp_bfcp.getCPtr(parm), parm);
  }

  public static void glp_set_bfcp(SWIGTYPE_p_glp_prob P, glp_bfcp parm) {
    glpkJNI.glp_set_bfcp(SWIGTYPE_p_glp_prob.getCPtr(P), glp_bfcp.getCPtr(parm), parm);
  }

  public static int glp_get_bhead(SWIGTYPE_p_glp_prob P, int k) {
    return glpkJNI.glp_get_bhead(SWIGTYPE_p_glp_prob.getCPtr(P), k);
  }

  public static int glp_get_row_bind(SWIGTYPE_p_glp_prob P, int i) {
    return glpkJNI.glp_get_row_bind(SWIGTYPE_p_glp_prob.getCPtr(P), i);
  }

  public static int glp_get_col_bind(SWIGTYPE_p_glp_prob P, int j) {
    return glpkJNI.glp_get_col_bind(SWIGTYPE_p_glp_prob.getCPtr(P), j);
  }

  public static void glp_ftran(SWIGTYPE_p_glp_prob P, SWIGTYPE_p_double x) {
    glpkJNI.glp_ftran(SWIGTYPE_p_glp_prob.getCPtr(P), SWIGTYPE_p_double.getCPtr(x));
  }

  public static void glp_btran(SWIGTYPE_p_glp_prob P, SWIGTYPE_p_double x) {
    glpkJNI.glp_btran(SWIGTYPE_p_glp_prob.getCPtr(P), SWIGTYPE_p_double.getCPtr(x));
  }

  public static int glp_warm_up(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_warm_up(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_eval_tab_row(SWIGTYPE_p_glp_prob P, int k, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_eval_tab_row(SWIGTYPE_p_glp_prob.getCPtr(P), k, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static int glp_eval_tab_col(SWIGTYPE_p_glp_prob P, int k, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_eval_tab_col(SWIGTYPE_p_glp_prob.getCPtr(P), k, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static int glp_transform_row(SWIGTYPE_p_glp_prob P, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_transform_row(SWIGTYPE_p_glp_prob.getCPtr(P), len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static int glp_transform_col(SWIGTYPE_p_glp_prob P, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val) {
    return glpkJNI.glp_transform_col(SWIGTYPE_p_glp_prob.getCPtr(P), len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val));
  }

  public static int glp_prim_rtest(SWIGTYPE_p_glp_prob P, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val, int dir, double eps) {
    return glpkJNI.glp_prim_rtest(SWIGTYPE_p_glp_prob.getCPtr(P), len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val), dir, eps);
  }

  public static int glp_dual_rtest(SWIGTYPE_p_glp_prob P, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val, int dir, double eps) {
    return glpkJNI.glp_dual_rtest(SWIGTYPE_p_glp_prob.getCPtr(P), len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val), dir, eps);
  }

  public static void glp_analyze_bound(SWIGTYPE_p_glp_prob P, int k, SWIGTYPE_p_double value1, SWIGTYPE_p_int var1, SWIGTYPE_p_double value2, SWIGTYPE_p_int var2) {
    glpkJNI.glp_analyze_bound(SWIGTYPE_p_glp_prob.getCPtr(P), k, SWIGTYPE_p_double.getCPtr(value1), SWIGTYPE_p_int.getCPtr(var1), SWIGTYPE_p_double.getCPtr(value2), SWIGTYPE_p_int.getCPtr(var2));
  }

  public static void glp_analyze_coef(SWIGTYPE_p_glp_prob P, int k, SWIGTYPE_p_double coef1, SWIGTYPE_p_int var1, SWIGTYPE_p_double value1, SWIGTYPE_p_double coef2, SWIGTYPE_p_int var2, SWIGTYPE_p_double value2) {
    glpkJNI.glp_analyze_coef(SWIGTYPE_p_glp_prob.getCPtr(P), k, SWIGTYPE_p_double.getCPtr(coef1), SWIGTYPE_p_int.getCPtr(var1), SWIGTYPE_p_double.getCPtr(value1), SWIGTYPE_p_double.getCPtr(coef2), SWIGTYPE_p_int.getCPtr(var2), SWIGTYPE_p_double.getCPtr(value2));
  }

  public static int glp_ios_reason(SWIGTYPE_p_glp_tree T) {
    return glpkJNI.glp_ios_reason(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static SWIGTYPE_p_glp_prob glp_ios_get_prob(SWIGTYPE_p_glp_tree T) {
    long cPtr = glpkJNI.glp_ios_get_prob(SWIGTYPE_p_glp_tree.getCPtr(T));
    return (cPtr == 0) ? null : new SWIGTYPE_p_glp_prob(cPtr, false);
  }

  public static void glp_ios_tree_size(SWIGTYPE_p_glp_tree T, SWIGTYPE_p_int a_cnt, SWIGTYPE_p_int n_cnt, SWIGTYPE_p_int t_cnt) {
    glpkJNI.glp_ios_tree_size(SWIGTYPE_p_glp_tree.getCPtr(T), SWIGTYPE_p_int.getCPtr(a_cnt), SWIGTYPE_p_int.getCPtr(n_cnt), SWIGTYPE_p_int.getCPtr(t_cnt));
  }

  public static int glp_ios_curr_node(SWIGTYPE_p_glp_tree T) {
    return glpkJNI.glp_ios_curr_node(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static int glp_ios_next_node(SWIGTYPE_p_glp_tree T, int p) {
    return glpkJNI.glp_ios_next_node(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static int glp_ios_prev_node(SWIGTYPE_p_glp_tree T, int p) {
    return glpkJNI.glp_ios_prev_node(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static int glp_ios_up_node(SWIGTYPE_p_glp_tree T, int p) {
    return glpkJNI.glp_ios_up_node(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static int glp_ios_node_level(SWIGTYPE_p_glp_tree T, int p) {
    return glpkJNI.glp_ios_node_level(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static double glp_ios_node_bound(SWIGTYPE_p_glp_tree T, int p) {
    return glpkJNI.glp_ios_node_bound(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static int glp_ios_best_node(SWIGTYPE_p_glp_tree T) {
    return glpkJNI.glp_ios_best_node(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static double glp_ios_mip_gap(SWIGTYPE_p_glp_tree T) {
    return glpkJNI.glp_ios_mip_gap(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static SWIGTYPE_p_void glp_ios_node_data(SWIGTYPE_p_glp_tree T, int p) {
    long cPtr = glpkJNI.glp_ios_node_data(SWIGTYPE_p_glp_tree.getCPtr(T), p);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void glp_ios_row_attr(SWIGTYPE_p_glp_tree T, int i, glp_attr attr) {
    glpkJNI.glp_ios_row_attr(SWIGTYPE_p_glp_tree.getCPtr(T), i, glp_attr.getCPtr(attr), attr);
  }

  public static int glp_ios_pool_size(SWIGTYPE_p_glp_tree T) {
    return glpkJNI.glp_ios_pool_size(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static int glp_ios_add_row(SWIGTYPE_p_glp_tree T, String name, int klass, int flags, int len, SWIGTYPE_p_int ind, SWIGTYPE_p_double val, int type, double rhs) {
    return glpkJNI.glp_ios_add_row(SWIGTYPE_p_glp_tree.getCPtr(T), name, klass, flags, len, SWIGTYPE_p_int.getCPtr(ind), SWIGTYPE_p_double.getCPtr(val), type, rhs);
  }

  public static void glp_ios_del_row(SWIGTYPE_p_glp_tree T, int i) {
    glpkJNI.glp_ios_del_row(SWIGTYPE_p_glp_tree.getCPtr(T), i);
  }

  public static void glp_ios_clear_pool(SWIGTYPE_p_glp_tree T) {
    glpkJNI.glp_ios_clear_pool(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static int glp_ios_can_branch(SWIGTYPE_p_glp_tree T, int j) {
    return glpkJNI.glp_ios_can_branch(SWIGTYPE_p_glp_tree.getCPtr(T), j);
  }

  public static void glp_ios_branch_upon(SWIGTYPE_p_glp_tree T, int j, int sel) {
    glpkJNI.glp_ios_branch_upon(SWIGTYPE_p_glp_tree.getCPtr(T), j, sel);
  }

  public static void glp_ios_select_node(SWIGTYPE_p_glp_tree T, int p) {
    glpkJNI.glp_ios_select_node(SWIGTYPE_p_glp_tree.getCPtr(T), p);
  }

  public static int glp_ios_heur_sol(SWIGTYPE_p_glp_tree T, SWIGTYPE_p_double x) {
    return glpkJNI.glp_ios_heur_sol(SWIGTYPE_p_glp_tree.getCPtr(T), SWIGTYPE_p_double.getCPtr(x));
  }

  public static void glp_ios_terminate(SWIGTYPE_p_glp_tree T) {
    glpkJNI.glp_ios_terminate(SWIGTYPE_p_glp_tree.getCPtr(T));
  }

  public static void glp_init_mpscp(glp_mpscp parm) {
    glpkJNI.glp_init_mpscp(glp_mpscp.getCPtr(parm), parm);
  }

  public static int glp_read_mps(SWIGTYPE_p_glp_prob P, int fmt, glp_mpscp parm, String fname) {
    return glpkJNI.glp_read_mps(SWIGTYPE_p_glp_prob.getCPtr(P), fmt, glp_mpscp.getCPtr(parm), parm, fname);
  }

  public static int glp_write_mps(SWIGTYPE_p_glp_prob P, int fmt, glp_mpscp parm, String fname) {
    return glpkJNI.glp_write_mps(SWIGTYPE_p_glp_prob.getCPtr(P), fmt, glp_mpscp.getCPtr(parm), parm, fname);
  }

  public static void glp_init_cpxcp(glp_cpxcp parm) {
    glpkJNI.glp_init_cpxcp(glp_cpxcp.getCPtr(parm), parm);
  }

  public static int glp_read_lp(SWIGTYPE_p_glp_prob P, glp_cpxcp parm, String fname) {
    return glpkJNI.glp_read_lp(SWIGTYPE_p_glp_prob.getCPtr(P), glp_cpxcp.getCPtr(parm), parm, fname);
  }

  public static int glp_write_lp(SWIGTYPE_p_glp_prob P, glp_cpxcp parm, String fname) {
    return glpkJNI.glp_write_lp(SWIGTYPE_p_glp_prob.getCPtr(P), glp_cpxcp.getCPtr(parm), parm, fname);
  }

  public static int glp_read_prob(SWIGTYPE_p_glp_prob P, int flags, String fname) {
    return glpkJNI.glp_read_prob(SWIGTYPE_p_glp_prob.getCPtr(P), flags, fname);
  }

  public static int glp_write_prob(SWIGTYPE_p_glp_prob P, int flags, String fname) {
    return glpkJNI.glp_write_prob(SWIGTYPE_p_glp_prob.getCPtr(P), flags, fname);
  }

  public static SWIGTYPE_p_glp_tran glp_mpl_alloc_wksp() {
    long cPtr = glpkJNI.glp_mpl_alloc_wksp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_glp_tran(cPtr, false);
  }

  public static int glp_mpl_read_model(SWIGTYPE_p_glp_tran tran, String fname, int skip) {
    return glpkJNI.glp_mpl_read_model(SWIGTYPE_p_glp_tran.getCPtr(tran), fname, skip);
  }

  public static int glp_mpl_read_data(SWIGTYPE_p_glp_tran tran, String fname) {
    return glpkJNI.glp_mpl_read_data(SWIGTYPE_p_glp_tran.getCPtr(tran), fname);
  }

  public static int glp_mpl_generate(SWIGTYPE_p_glp_tran tran, String fname) {
    return glpkJNI.glp_mpl_generate(SWIGTYPE_p_glp_tran.getCPtr(tran), fname);
  }

  public static void glp_mpl_build_prob(SWIGTYPE_p_glp_tran tran, SWIGTYPE_p_glp_prob prob) {
    glpkJNI.glp_mpl_build_prob(SWIGTYPE_p_glp_tran.getCPtr(tran), SWIGTYPE_p_glp_prob.getCPtr(prob));
  }

  public static int glp_mpl_postsolve(SWIGTYPE_p_glp_tran tran, SWIGTYPE_p_glp_prob prob, int sol) {
    return glpkJNI.glp_mpl_postsolve(SWIGTYPE_p_glp_tran.getCPtr(tran), SWIGTYPE_p_glp_prob.getCPtr(prob), sol);
  }

  public static void glp_mpl_free_wksp(SWIGTYPE_p_glp_tran tran) {
    glpkJNI.glp_mpl_free_wksp(SWIGTYPE_p_glp_tran.getCPtr(tran));
  }

  public static int glp_main(int argc, SWIGTYPE_p_p_char argv) {
    return glpkJNI.glp_main(argc, SWIGTYPE_p_p_char.getCPtr(argv));
  }

  public static int glp_read_cnfsat(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_read_cnfsat(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_check_cnfsat(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_check_cnfsat(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_write_cnfsat(SWIGTYPE_p_glp_prob P, String fname) {
    return glpkJNI.glp_write_cnfsat(SWIGTYPE_p_glp_prob.getCPtr(P), fname);
  }

  public static int glp_minisat1(SWIGTYPE_p_glp_prob P) {
    return glpkJNI.glp_minisat1(SWIGTYPE_p_glp_prob.getCPtr(P));
  }

  public static int glp_intfeas1(SWIGTYPE_p_glp_prob P, int use_bound, int obj_bound) {
    return glpkJNI.glp_intfeas1(SWIGTYPE_p_glp_prob.getCPtr(P), use_bound, obj_bound);
  }

  public static int glp_init_env() {
    return glpkJNI.glp_init_env();
  }

  public static String glp_version() {
    return glpkJNI.glp_version();
  }

  public static int glp_free_env() {
    return glpkJNI.glp_free_env();
  }

  public static void glp_puts(String s) {
    glpkJNI.glp_puts(s);
  }

  public static void glp_printf(String fmt) {
    glpkJNI.glp_printf(fmt);
  }

  public static void glp_vprintf(String fmt, SWIGTYPE_p_va_list arg) {
    glpkJNI.glp_vprintf(fmt, SWIGTYPE_p_va_list.getCPtr(arg));
  }

  public static int glp_term_out(int flag) {
    return glpkJNI.glp_term_out(flag);
  }

  public static void glp_term_hook(SWIGTYPE_p_f_p_void_p_q_const__char__int func, SWIGTYPE_p_void info) {
    glpkJNI.glp_term_hook(SWIGTYPE_p_f_p_void_p_q_const__char__int.getCPtr(func), SWIGTYPE_p_void.getCPtr(info));
  }

  public static int glp_open_tee(String name) {
    return glpkJNI.glp_open_tee(name);
  }

  public static int glp_close_tee() {
    return glpkJNI.glp_close_tee();
  }

  public static SWIGTYPE_p_f_p_q_const__char_v_______void glp_error_(String file, int line) {
    long cPtr = glpkJNI.glp_error_(file, line);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__char_v_______void(cPtr, false);
  }

  public static void glp_assert_(String expr, String file, int line) {
    glpkJNI.glp_assert_(expr, file, line);
  }

  public static void glp_error_hook(SWIGTYPE_p_f_p_void__void func, SWIGTYPE_p_void info) {
    glpkJNI.glp_error_hook(SWIGTYPE_p_f_p_void__void.getCPtr(func), SWIGTYPE_p_void.getCPtr(info));
  }

  public static SWIGTYPE_p_void glp_alloc(int n, int size) {
    long cPtr = glpkJNI.glp_alloc(n, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void glp_realloc(SWIGTYPE_p_void ptr, int n, int size) {
    long cPtr = glpkJNI.glp_realloc(SWIGTYPE_p_void.getCPtr(ptr), n, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void glp_free(SWIGTYPE_p_void ptr) {
    glpkJNI.glp_free(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static void glp_mem_limit(int limit) {
    glpkJNI.glp_mem_limit(limit);
  }

  public static void glp_mem_usage(SWIGTYPE_p_int count, SWIGTYPE_p_int cpeak, SWIGTYPE_p_size_t total, SWIGTYPE_p_size_t tpeak) {
    glpkJNI.glp_mem_usage(SWIGTYPE_p_int.getCPtr(count), SWIGTYPE_p_int.getCPtr(cpeak), SWIGTYPE_p_size_t.getCPtr(total), SWIGTYPE_p_size_t.getCPtr(tpeak));
  }

  public static SWIGTYPE_p_glp_graph glp_create_graph(int v_size, int a_size) {
    long cPtr = glpkJNI.glp_create_graph(v_size, a_size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_glp_graph(cPtr, false);
  }

  public static void glp_set_graph_name(SWIGTYPE_p_glp_graph G, String name) {
    glpkJNI.glp_set_graph_name(SWIGTYPE_p_glp_graph.getCPtr(G), name);
  }

  public static int glp_add_vertices(SWIGTYPE_p_glp_graph G, int nadd) {
    return glpkJNI.glp_add_vertices(SWIGTYPE_p_glp_graph.getCPtr(G), nadd);
  }

  public static void glp_set_vertex_name(SWIGTYPE_p_glp_graph G, int i, String name) {
    glpkJNI.glp_set_vertex_name(SWIGTYPE_p_glp_graph.getCPtr(G), i, name);
  }

  public static SWIGTYPE_p_glp_arc glp_add_arc(SWIGTYPE_p_glp_graph G, int i, int j) {
    long cPtr = glpkJNI.glp_add_arc(SWIGTYPE_p_glp_graph.getCPtr(G), i, j);
    return (cPtr == 0) ? null : new SWIGTYPE_p_glp_arc(cPtr, false);
  }

  public static void glp_del_vertices(SWIGTYPE_p_glp_graph G, int ndel, SWIGTYPE_p_int num) {
    glpkJNI.glp_del_vertices(SWIGTYPE_p_glp_graph.getCPtr(G), ndel, SWIGTYPE_p_int.getCPtr(num));
  }

  public static void glp_del_arc(SWIGTYPE_p_glp_graph G, SWIGTYPE_p_glp_arc a) {
    glpkJNI.glp_del_arc(SWIGTYPE_p_glp_graph.getCPtr(G), SWIGTYPE_p_glp_arc.getCPtr(a));
  }

  public static void glp_erase_graph(SWIGTYPE_p_glp_graph G, int v_size, int a_size) {
    glpkJNI.glp_erase_graph(SWIGTYPE_p_glp_graph.getCPtr(G), v_size, a_size);
  }

  public static void glp_delete_graph(SWIGTYPE_p_glp_graph G) {
    glpkJNI.glp_delete_graph(SWIGTYPE_p_glp_graph.getCPtr(G));
  }

  public static void glp_create_v_index(SWIGTYPE_p_glp_graph G) {
    glpkJNI.glp_create_v_index(SWIGTYPE_p_glp_graph.getCPtr(G));
  }

  public static int glp_find_vertex(SWIGTYPE_p_glp_graph G, String name) {
    return glpkJNI.glp_find_vertex(SWIGTYPE_p_glp_graph.getCPtr(G), name);
  }

  public static void glp_delete_v_index(SWIGTYPE_p_glp_graph G) {
    glpkJNI.glp_delete_v_index(SWIGTYPE_p_glp_graph.getCPtr(G));
  }

  public static int glp_read_graph(SWIGTYPE_p_glp_graph G, String fname) {
    return glpkJNI.glp_read_graph(SWIGTYPE_p_glp_graph.getCPtr(G), fname);
  }

  public static int glp_write_graph(SWIGTYPE_p_glp_graph G, String fname) {
    return glpkJNI.glp_write_graph(SWIGTYPE_p_glp_graph.getCPtr(G), fname);
  }

  public static void glp_mincost_lp(SWIGTYPE_p_glp_prob P, SWIGTYPE_p_glp_graph G, int names, int v_rhs, int a_low, int a_cap, int a_cost) {
    glpkJNI.glp_mincost_lp(SWIGTYPE_p_glp_prob.getCPtr(P), SWIGTYPE_p_glp_graph.getCPtr(G), names, v_rhs, a_low, a_cap, a_cost);
  }

  public static int glp_mincost_okalg(SWIGTYPE_p_glp_graph G, int v_rhs, int a_low, int a_cap, int a_cost, SWIGTYPE_p_double sol, int a_x, int v_pi) {
    return glpkJNI.glp_mincost_okalg(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_low, a_cap, a_cost, SWIGTYPE_p_double.getCPtr(sol), a_x, v_pi);
  }

  public static int glp_mincost_relax4(SWIGTYPE_p_glp_graph G, int v_rhs, int a_low, int a_cap, int a_cost, int crash, SWIGTYPE_p_double sol, int a_x, int a_rc) {
    return glpkJNI.glp_mincost_relax4(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_low, a_cap, a_cost, crash, SWIGTYPE_p_double.getCPtr(sol), a_x, a_rc);
  }

  public static void glp_maxflow_lp(SWIGTYPE_p_glp_prob P, SWIGTYPE_p_glp_graph G, int names, int s, int t, int a_cap) {
    glpkJNI.glp_maxflow_lp(SWIGTYPE_p_glp_prob.getCPtr(P), SWIGTYPE_p_glp_graph.getCPtr(G), names, s, t, a_cap);
  }

  public static int glp_maxflow_ffalg(SWIGTYPE_p_glp_graph G, int s, int t, int a_cap, SWIGTYPE_p_double sol, int a_x, int v_cut) {
    return glpkJNI.glp_maxflow_ffalg(SWIGTYPE_p_glp_graph.getCPtr(G), s, t, a_cap, SWIGTYPE_p_double.getCPtr(sol), a_x, v_cut);
  }

  public static int glp_check_asnprob(SWIGTYPE_p_glp_graph G, int v_set) {
    return glpkJNI.glp_check_asnprob(SWIGTYPE_p_glp_graph.getCPtr(G), v_set);
  }

  public static int glp_asnprob_lp(SWIGTYPE_p_glp_prob P, int form, SWIGTYPE_p_glp_graph G, int names, int v_set, int a_cost) {
    return glpkJNI.glp_asnprob_lp(SWIGTYPE_p_glp_prob.getCPtr(P), form, SWIGTYPE_p_glp_graph.getCPtr(G), names, v_set, a_cost);
  }

  public static int glp_asnprob_okalg(int form, SWIGTYPE_p_glp_graph G, int v_set, int a_cost, SWIGTYPE_p_double sol, int a_x) {
    return glpkJNI.glp_asnprob_okalg(form, SWIGTYPE_p_glp_graph.getCPtr(G), v_set, a_cost, SWIGTYPE_p_double.getCPtr(sol), a_x);
  }

  public static int glp_asnprob_hall(SWIGTYPE_p_glp_graph G, int v_set, int a_x) {
    return glpkJNI.glp_asnprob_hall(SWIGTYPE_p_glp_graph.getCPtr(G), v_set, a_x);
  }

  public static double glp_cpp(SWIGTYPE_p_glp_graph G, int v_t, int v_es, int v_ls) {
    return glpkJNI.glp_cpp(SWIGTYPE_p_glp_graph.getCPtr(G), v_t, v_es, v_ls);
  }

  public static int glp_read_mincost(SWIGTYPE_p_glp_graph G, int v_rhs, int a_low, int a_cap, int a_cost, String fname) {
    return glpkJNI.glp_read_mincost(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_low, a_cap, a_cost, fname);
  }

  public static int glp_write_mincost(SWIGTYPE_p_glp_graph G, int v_rhs, int a_low, int a_cap, int a_cost, String fname) {
    return glpkJNI.glp_write_mincost(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_low, a_cap, a_cost, fname);
  }

  public static int glp_read_maxflow(SWIGTYPE_p_glp_graph G, SWIGTYPE_p_int s, SWIGTYPE_p_int t, int a_cap, String fname) {
    return glpkJNI.glp_read_maxflow(SWIGTYPE_p_glp_graph.getCPtr(G), SWIGTYPE_p_int.getCPtr(s), SWIGTYPE_p_int.getCPtr(t), a_cap, fname);
  }

  public static int glp_write_maxflow(SWIGTYPE_p_glp_graph G, int s, int t, int a_cap, String fname) {
    return glpkJNI.glp_write_maxflow(SWIGTYPE_p_glp_graph.getCPtr(G), s, t, a_cap, fname);
  }

  public static int glp_read_asnprob(SWIGTYPE_p_glp_graph G, int v_set, int a_cost, String fname) {
    return glpkJNI.glp_read_asnprob(SWIGTYPE_p_glp_graph.getCPtr(G), v_set, a_cost, fname);
  }

  public static int glp_write_asnprob(SWIGTYPE_p_glp_graph G, int v_set, int a_cost, String fname) {
    return glpkJNI.glp_write_asnprob(SWIGTYPE_p_glp_graph.getCPtr(G), v_set, a_cost, fname);
  }

  public static int glp_read_ccdata(SWIGTYPE_p_glp_graph G, int v_wgt, String fname) {
    return glpkJNI.glp_read_ccdata(SWIGTYPE_p_glp_graph.getCPtr(G), v_wgt, fname);
  }

  public static int glp_write_ccdata(SWIGTYPE_p_glp_graph G, int v_wgt, String fname) {
    return glpkJNI.glp_write_ccdata(SWIGTYPE_p_glp_graph.getCPtr(G), v_wgt, fname);
  }

  public static int glp_netgen(SWIGTYPE_p_glp_graph G, int v_rhs, int a_cap, int a_cost, SWIGTYPE_p_int parm) {
    return glpkJNI.glp_netgen(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_cap, a_cost, SWIGTYPE_p_int.getCPtr(parm));
  }

  public static void glp_netgen_prob(int nprob, SWIGTYPE_p_int parm) {
    glpkJNI.glp_netgen_prob(nprob, SWIGTYPE_p_int.getCPtr(parm));
  }

  public static int glp_gridgen(SWIGTYPE_p_glp_graph G, int v_rhs, int a_cap, int a_cost, SWIGTYPE_p_int parm) {
    return glpkJNI.glp_gridgen(SWIGTYPE_p_glp_graph.getCPtr(G), v_rhs, a_cap, a_cost, SWIGTYPE_p_int.getCPtr(parm));
  }

  public static int glp_rmfgen(SWIGTYPE_p_glp_graph G, SWIGTYPE_p_int s, SWIGTYPE_p_int t, int a_cap, SWIGTYPE_p_int parm) {
    return glpkJNI.glp_rmfgen(SWIGTYPE_p_glp_graph.getCPtr(G), SWIGTYPE_p_int.getCPtr(s), SWIGTYPE_p_int.getCPtr(t), a_cap, SWIGTYPE_p_int.getCPtr(parm));
  }

  public static int glp_weak_comp(SWIGTYPE_p_glp_graph G, int v_num) {
    return glpkJNI.glp_weak_comp(SWIGTYPE_p_glp_graph.getCPtr(G), v_num);
  }

  public static int glp_strong_comp(SWIGTYPE_p_glp_graph G, int v_num) {
    return glpkJNI.glp_strong_comp(SWIGTYPE_p_glp_graph.getCPtr(G), v_num);
  }

  public static int glp_top_sort(SWIGTYPE_p_glp_graph G, int v_num) {
    return glpkJNI.glp_top_sort(SWIGTYPE_p_glp_graph.getCPtr(G), v_num);
  }

  public static int glp_wclique_exact(SWIGTYPE_p_glp_graph G, int v_wgt, SWIGTYPE_p_double sol, int v_set) {
    return glpkJNI.glp_wclique_exact(SWIGTYPE_p_glp_graph.getCPtr(G), v_wgt, SWIGTYPE_p_double.getCPtr(sol), v_set);
  }

}
